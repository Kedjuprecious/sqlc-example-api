// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message.sql

package repo

import (
	"context"
)

const CreateCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (customer_name, phone, email)
VALUES ($1, $2, $3)
RETURNING id, customer_name, phone, email, created_at
`

type CreateCustomerParams struct {
	CustomerName string `json:"customer_name"`
	Phone        string `json:"phone"`
	Email        string `json:"email"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, CreateCustomer, arg.CustomerName, arg.Phone, arg.Email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.CustomerName,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const CreateOrder = `-- name: CreateOrder :one
INSERT INTO "order" (customer_id, total_price)
VALUES ($1, $2)
RETURNING id, customer_id, order_status, total_price, created_at
`

type CreateOrderParams struct {
	CustomerID string `json:"customer_id"`
	TotalPrice string `json:"total_price"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, CreateOrder, arg.CustomerID, arg.TotalPrice)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.OrderStatus,
		&i.TotalPrice,
		&i.CreatedAt,
	)
	return i, err
}

const DeleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customer 
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, DeleteCustomer, id)
	return err
}

const GetCustomerById = `-- name: GetCustomerById :one
SELECT id, customer_name, phone, email, created_at FROM customer
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCustomerById(ctx context.Context, id string) (Customer, error) {
	row := q.db.QueryRow(ctx, GetCustomerById, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.CustomerName,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const UpdateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE "order"
SET order_status = $2
WHERE id = $1
`

type UpdateOrderStatusParams struct {
	ID          string `json:"id"`
	OrderStatus string `json:"order_status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.Exec(ctx, UpdateOrderStatus, arg.ID, arg.OrderStatus)
	return err
}
